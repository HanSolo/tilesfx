/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2016-2021 Gerrit Grunwald.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

import java.text.SimpleDateFormat

plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.google.osdetector'           version '1.7.3'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.beryx.jlink'                 version '3.0.1'
    id 'net.nemerosa.versioning'         version '3.0.0'
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

description   = 'TilesFX is a JavaFX library containing tiles for dashboards'

Date buildTimeAndDate = new Date()
ext {
    moduleName      = 'eu.hansolo.tilesfx'
    buildDate       = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime       = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    platform        = osdetector.os == 'osx' ? osdetector.arch == 'aarch_64' ? 'mac-aarch64' : 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os == 'linux' ? osdetector.arch == 'aarch_64' ? 'linux-aarch64' : 'linux' : osdetector.os
    ciOssrhUsername = System.getenv('OSSRH_USERNAME')
    ciOssrhPassword = System.getenv('OSSRH_PASSWORD')
    ciGHUser        = System.getenv('GH_USER')
    ciGHToken       = System.getenv('GH_TOKEN')
    gpgkey          = System.getenv("GPG_PRIVATE_KEY")
    gpgpassphrase   = System.getenv("PASSPHRASE")
}

repositories {
    mavenCentral()
}

dependencies {
    api "eu.hansolo.fx:countries:21.0.0"
    implementation "org.openjfx:javafx-base:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-graphics:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-controls:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-swing:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-web:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-media:${javafxVersion}:${platform}"
}

application {
    mainClass = "eu.hansolo.tilesfx.DemoLauncher"
    mainModule = moduleName
}

java {
    // Set to false per https://github.com/java9-modularity/gradle-modules-plugin
    modularity.inferModulePath.set(false)
}

jar {
    from {
        //duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        //configurations.runtimeClasspath.collect {  it.isDirectory() ? it : zipTree(it)  }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    manifest {
        attributes(
                'Built-By'              : System.properties['user.name'],
                'Created-By'            : System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
                'Build-Date'            : project.buildDate,
                'Build-Time'            : project.buildTime,
                'Build-Revision'        : versioning.info.commit,
                'Specification-Title'   : project.name,
                'Specification-Version' : project.version,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.version,
                'Bundle-Name'           : project.name,
                'Bundle-License'        : 'https://www.apache.org/licenses/LICENSE-2.0;description=Apache License Version 2.0;link=https://spdx.org/licenses/Apache-2.0.html',
                'Bundle-Description'    : project.description,
                'Bundle-SymbolicName'   : 'eu.hansolo.tilesfx',
                'Export-Package'        : 'eu.hansolo.tilesfx, eu.hansolo.tilesfx.chart, eu.hansolo.tilesfx.colors, eu.hansolo.tilesfx.events, eu.hansolo.tilesfx.fonts, eu.hansolo.tilesfx.icons, eu.hansolo.tilesfx.skins,eu.hansolo.tilesfx.tools',
                'Class-Path'            : "${project.name}-${project.version}.jar",
                'Main-Class'            : application.mainClass
        )
    }
}


if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}


task Demo(type: JavaExec) {
    mainClass = 'eu.hansolo.tilesfx.DemoLauncher'
    classpath = sourceSets.main.runtimeClasspath
}

task Test(type: JavaExec) {
    mainClass = 'eu.hansolo.tilesfx.TestLauncher'
    classpath = sourceSets.main.runtimeClasspath
}

// create one jar for the javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// create one jar for the source files
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    if (gpgkey && gpgpassphrase) {
        useInMemoryPgpKeys(gpgkey, gpgpassphrase)
    }

    sign configurations.archives
    sign publishing.publications
}

// Remove 'thirdPartyCompatibility' from JavaFX runtimeElements variant
// Otherwise it locks Gradle Module Metadata (GMM) to the publishing OS
tasks.withType(GenerateModuleMetadata).configureEach {
    doLast { _ ->
        def gmmFile = it.outputFile.get().asFile
        def inJson = new JsonSlurper().parseText(gmmFile.text)
        def filteredVariant = inJson.variants.findAll { it.name == configurations.runtimeElements.name }
        // remove "thirdPartyCompatibility" from GMM
        filteredVariant.dependencies.first().each {
            if (it.group == 'org.openjfx') {
                it.remove('thirdPartyCompatibility')
            }
        }
        def outJson = JsonOutput.toJson(inJson)
        gmmFile.write(JsonOutput.prettyPrint(outJson))
    }
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            group      = 'eu.hansolo'
            artifactId = 'tilesfx'
            version    = "${version}"

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().dependencies.'*'.findAll {
                    it.groupId.text() == 'org.openjfx'
                }.each {
                    it.remove(it.classifier)
                }
            }

            pom {
                name        = 'TilesFX'
                description = 'TilesFX is a JavaFX library containing tiles for dashboards'
                url         = "https://github.com/HanSolo/tilesfx/wiki"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url  = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id    = "HanSolo"
                        name  = "Gerrit Grunwald"
                        email = "han.solo@mac.com"
                    }
                }
                scm {
                    connection          = "scm:git:https://HanSolo/tilesfx"
                    developerConnection = "scm:git:https://HanSolo/tilesfx"
                    url                 = "https://github.com/HanSolo/tilesfx"
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url  = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            try {
                credentials {
                    username = null == ciOssrhUsername ? ossrhUsername : ciOssrhUsername
                    password = null == ciOssrhPassword ? ossrhPassword : ciOssrhPassword
                }
            } catch (Exception e) {

            }
        }
        maven {
            name = "GitHubPackages"
            url  = "https://maven.pkg.github.com/HanSolo/tilesfx"
            try {
                credentials {
                    username = null == ciGHUser  ? ghUser  : ciGHUser
                    password = null == ciGHToken ? ghToken : ciGHToken
                }
            } catch (Exception e) {

            }
        }
    }
}
